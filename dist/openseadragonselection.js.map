{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["$","checkMinimumRect","self","cropMinimumSize","minPoint","viewer","viewport","imageToViewportCoordinates","cropMinimumWidth","cropMinimumHeight","rect","width","x","height","y","rotate","cx","cy","degrees","radians","Math","PI","cos","sin","xRot","yRot","onOutsideDrag","e","this","setMouseNavEnabled","delta","deltaPointsFromPixels","deg","getRotation","pp","end","pointFromPixel","position","start","Point","oldRect","restrictToImage","clone","rectDone","allowRotation","angle1","getAngleFromCenter","angle2","rotation","startRotated","getPrerotatedRect","rotatedStartPoint","startRotatedHeight","bounds","world","getHomeBounds","fitsIn","Rect","pointIsInImage","restrictVector","SelectionRect","draw","onOutsideDragEnd","abs","onClick","canvas","focus","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onBorderDrag","border","getDegreeRotation","_pp","onBorderDragEnd","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","minus","dist","distanceTo","angle","atan2","center","heightModDelta","point","prop","version","major","Error","Viewer","prototype","selection","options","selectionInstance","Selection","extend","isSelecting","buttonActiveImg","toggleButton","showSelectionControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onSelectionConfirmed","onSelectionCanceled","onSelectionChange","onSelectionToggled","prefixUrl","navImages","REST","GROUP","HOVER","DOWN","selectionConfirm","selectionCancel","borderStyle","color","handleStyle","top","left","margin","background","cornersStyle","makeNeutralElement","style","className","borders","handle","corners","i","MouseTracker","dragHandler","bind","dragEndHandler","appendChild","setTimeout","right","bottom","overlay","SelectionOverlay","innerTracker","clickTimeThreshold","clickDistThreshold","delegate","clickHandler","outerTracker","startDisabled","addEvent","container","prefix","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","srcRest","srcGroup","srcHover","srcDown","onRelease","push","imgDown","cloneNode","confirmButton","classList","add","cancelButton","cancel","transform","addHandler","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","setAllowRotation","enable","disable","rad","update","normalize","drawHTML","drawer","destroy","result","real","getItemCount","getItemAt","viewportToImageRectangle","fromRect","round","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","equals","other","toString","swapWidthHeight","swapped","diff","getCenter","fixed","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"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","file":"openseadragonselection.js","sourcesContent":["(function($) {\r\n  'use strict';\r\n\r\n  if (!$.version || $.version.major < 2) {\r\n      throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\r\n  }\r\n\r\n  $.Viewer.prototype.selection = function(options) {\r\n      if (!this.selectionInstance || options) {\r\n          options = options || {};\r\n          options.viewer = this;\r\n          this.selectionInstance = new $.Selection(options);\r\n      }\r\n      return this.selectionInstance;\r\n  };\r\n\r\n\r\n  /**\r\n  * @class Selection\r\n  * @classdesc Provides functionality for selecting part of an image\r\n  * @memberof OpenSeadragon\r\n  * @param {Object} options\r\n  */\r\n  $.Selection = function ( options ) {\r\n\r\n      $.extend( true, this, {\r\n          // internal state properties\r\n          viewer:                  null,\r\n          isSelecting:             false,\r\n          buttonActiveImg:         false,\r\n          rectDone:                true,\r\n\r\n          // options\r\n          element:                 null,\r\n          toggleButton:            null,\r\n          showSelectionControl:    true,\r\n          showConfirmDenyButtons:  true,\r\n          styleConfirmDenyButtons: true,\r\n          returnPixelCoordinates:  true,\r\n          keyboardShortcut:        'c',\r\n          rect:                    null,\r\n          allowRotation:           true,\r\n          startRotated:            false, // useful for rotated crops\r\n          startRotatedHeight:      0.1,\r\n          restrictToImage:         false,\r\n          cropMinimumSize:         false,\r\n          cropMinimumWidth:        0,\r\n          cropMinimumHeight:       0,\r\n          onSelectionConfirmed:    null,\r\n          onSelectionCanceled:     null,\r\n          onSelectionChange:       null,\r\n          onSelectionToggled:      null,\r\n          prefixUrl:               null,\r\n          navImages:               {\r\n              selection: {\r\n                  REST:   'selection_rest.png',\r\n                  GROUP:  'selection_grouphover.png',\r\n                  HOVER:  'selection_hover.png',\r\n                  DOWN:   'selection_pressed.png'\r\n              },\r\n              selectionConfirm: {\r\n                  REST:   'selection_confirm_rest.png',\r\n                  GROUP:  'selection_confirm_grouphover.png',\r\n                  HOVER:  'selection_confirm_hover.png',\r\n                  DOWN:   'selection_confirm_pressed.png'\r\n              },\r\n              selectionCancel: {\r\n                  REST:   'selection_cancel_rest.png',\r\n                  GROUP:  'selection_cancel_grouphover.png',\r\n                  HOVER:  'selection_cancel_hover.png',\r\n                  DOWN:   'selection_cancel_pressed.png'\r\n              },\r\n          },\r\n          borderStyle: {\r\n              width:      '1px',\r\n              color:      '#fff'\r\n          },\r\n          handleStyle: {\r\n              top:        '50%',\r\n              left:       '50%',\r\n              width:      '6px',\r\n              height:     '6px',\r\n              margin:     '-4px 0 0 -4px',\r\n              background: '#000',\r\n              border:     '1px solid #ccc'\r\n          },\r\n          cornersStyle: {\r\n              width:      '6px',\r\n              height:     '6px',\r\n              background: '#000',\r\n              border:     '1px solid #ccc'\r\n          }\r\n\r\n      }, options );\r\n\r\n      $.extend( true, this.navImages, this.viewer.navImages );\r\n\r\n      if (!this.element) {\r\n          this.element = $.makeNeutralElement('div');\r\n          this.element.style.background = 'rgba(0, 0, 0, 0.1)';\r\n          this.element.className        = 'selection-box';\r\n      }\r\n      this.borders = this.borders || [];\r\n      var handle;\r\n      var corners = [];\r\n      for (var i = 0; i < 4; i++) {\r\n          if (!this.borders[i]) {\r\n              this.borders[i]                  = $.makeNeutralElement('div');\r\n              this.borders[i].className        = 'border-' + i;\r\n              this.borders[i].style.position   = 'absolute';\r\n              this.borders[i].style.width      = this.borderStyle.width;\r\n              this.borders[i].style.height     = this.borderStyle.width;\r\n              this.borders[i].style.background = this.borderStyle.color;\r\n          }\r\n\r\n          handle                  = $.makeNeutralElement('div');\r\n          handle.className        = 'border-' + i + '-handle';\r\n          handle.style.position   = 'absolute';\r\n          handle.style.top        = this.handleStyle.top;\r\n          handle.style.left       = this.handleStyle.left;\r\n          handle.style.width      = this.handleStyle.width;\r\n          handle.style.height     = this.handleStyle.height;\r\n          handle.style.margin     = this.handleStyle.margin;\r\n          handle.style.background = this.handleStyle.background;\r\n          handle.style.border     = this.handleStyle.border;\r\n          new $.MouseTracker({\r\n              element:     this.borders[i],\r\n              dragHandler: onBorderDrag.bind(this, i),\r\n              dragEndHandler: onBorderDragEnd.bind(this, i),\r\n          });\r\n\r\n          corners[i]                  = $.makeNeutralElement('div');\r\n          corners[i].className        = 'corner-' + i + '-handle';\r\n          corners[i].style.position   = 'absolute';\r\n          corners[i].style.width      = this.cornersStyle.width;\r\n          corners[i].style.height     = this.cornersStyle.height;\r\n          corners[i].style.background = this.cornersStyle.background;\r\n          corners[i].style.border     = this.cornersStyle.border;\r\n          new $.MouseTracker({\r\n              element:     corners[i],\r\n              dragHandler: onBorderDrag.bind(this, i + 0.5),\r\n              dragEndHandler: onBorderDragEnd.bind(this, i),\r\n          });\r\n\r\n          this.borders[i].appendChild(handle);\r\n          this.element.appendChild(this.borders[i]);\r\n          // defer corners, so they are appended last\r\n          setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\r\n      }\r\n      this.borders[0].style.top = 0;\r\n      this.borders[0].style.width = '100%';\r\n      this.borders[1].style.right = 0;\r\n      this.borders[1].style.height = '100%';\r\n      this.borders[2].style.bottom = 0;\r\n      this.borders[2].style.width = '100%';\r\n      this.borders[3].style.left = 0;\r\n      this.borders[3].style.height = '100%';\r\n      corners[0].style.top = '-3px';\r\n      corners[0].style.left = '-3px';\r\n      corners[1].style.top = '-3px';\r\n      corners[1].style.right = '-3px';\r\n      corners[2].style.bottom = '-3px';\r\n      corners[2].style.right = '-3px';\r\n      corners[3].style.bottom = '-3px';\r\n      corners[3].style.left = '-3px';\r\n\r\n      if (!this.overlay) {\r\n          this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\r\n      }\r\n\r\n      this.innerTracker = new $.MouseTracker({\r\n          element:            this.element,\r\n          clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n          clickDistThreshold: this.viewer.clickDistThreshold,\r\n          dragHandler:        $.delegate( this, onInsideDrag ),\r\n          dragEndHandler:     $.delegate( this, onInsideDragEnd ),\r\n          // keyHandler:         $.delegate( this, onKeyPress ),\r\n          clickHandler:       $.delegate( this, onClick ),\r\n          // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\r\n          // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\r\n      });\r\n\r\n      this.outerTracker = new $.MouseTracker({\r\n          element:            this.viewer.canvas,\r\n          clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n          clickDistThreshold: this.viewer.clickDistThreshold,\r\n          dragHandler:        $.delegate( this, onOutsideDrag ),\r\n          dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\r\n          clickHandler:       $.delegate( this, onClick ),\r\n          startDisabled:      !this.isSelecting,\r\n      });\r\n\r\n      if (this.keyboardShortcut) {\r\n          $.addEvent(\r\n              this.viewer.container,\r\n              'keypress',\r\n              $.delegate(this, onKeyPress),\r\n              false\r\n          );\r\n      }\r\n\r\n      var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\r\n      var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\r\n      var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\r\n      var onFocusHandler = anyButton ? anyButton.onFocus : null;\r\n      var onBlurHandler = anyButton ? anyButton.onBlur : null;\r\n      if (this.showSelectionControl) {\r\n          this.toggleButton = new $.Button({\r\n              element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\r\n              clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n              clickDistThreshold: this.viewer.clickDistThreshold,\r\n              tooltip:    $.getString('Tooltips.SelectionToggle') || 'Toggle selection',\r\n              srcRest:    prefix + this.navImages.selection.REST,\r\n              srcGroup:   prefix + this.navImages.selection.GROUP,\r\n              srcHover:   prefix + this.navImages.selection.HOVER,\r\n              srcDown:    prefix + this.navImages.selection.DOWN,\r\n              onRelease:  this.toggleState.bind( this ),\r\n              onFocus:    onFocusHandler,\r\n              onBlur:     onBlurHandler\r\n          });\r\n          if (useGroup) {\r\n              this.viewer.buttons.buttons.push(this.toggleButton);\r\n              this.viewer.buttons.element.appendChild(this.toggleButton.element);\r\n          }\r\n          if (this.toggleButton.imgDown) {\r\n              this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\r\n              this.toggleButton.element.appendChild(this.buttonActiveImg);\r\n          }\r\n      }\r\n      if (this.showConfirmDenyButtons) {\r\n          this.confirmButton = new $.Button({\r\n              element:    this.confirmButton ? $.getElement( this.confirmButton ) : null,\r\n              clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n              clickDistThreshold: this.viewer.clickDistThreshold,\r\n              tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Confirm selection',\r\n              srcRest:    prefix + this.navImages.selectionConfirm.REST,\r\n              srcGroup:   prefix + this.navImages.selectionConfirm.GROUP,\r\n              srcHover:   prefix + this.navImages.selectionConfirm.HOVER,\r\n              srcDown:    prefix + this.navImages.selectionConfirm.DOWN,\r\n              onRelease:  this.confirm.bind( this ),\r\n              onFocus:    onFocusHandler,\r\n              onBlur:     onBlurHandler\r\n          });\r\n          var confirm = this.confirmButton.element;\r\n          confirm.classList.add('confirm-button');\r\n          this.element.appendChild(confirm);\r\n\r\n          this.cancelButton = new $.Button({\r\n              element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\r\n              clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n              clickDistThreshold: this.viewer.clickDistThreshold,\r\n              tooltip:    $.getString('Tooltips.SelectionCancel') || 'Cancel selection',\r\n              srcRest:    prefix + this.navImages.selectionCancel.REST,\r\n              srcGroup:   prefix + this.navImages.selectionCancel.GROUP,\r\n              srcHover:   prefix + this.navImages.selectionCancel.HOVER,\r\n              srcDown:    prefix + this.navImages.selectionCancel.DOWN,\r\n              onRelease:  this.cancel.bind( this ),\r\n              onFocus:    onFocusHandler,\r\n              onBlur:     onBlurHandler\r\n          });\r\n          var cancel = this.cancelButton.element;\r\n          cancel.classList.add('cancel-button');\r\n          this.element.appendChild(cancel);\r\n\r\n          if (this.styleConfirmDenyButtons) {\r\n              confirm.style.position = 'absolute';\r\n              confirm.style.top = '50%';\r\n              confirm.style.left = '50%';\r\n              confirm.style.transform = 'translate(-100%, -50%)';\r\n\r\n              cancel.style.position = 'absolute';\r\n              cancel.style.top = '50%';\r\n              cancel.style.left = '50%';\r\n              cancel.style.transform = 'translate(0, -50%)';\r\n          }\r\n      }\r\n\r\n      this.viewer.addHandler('selection', this.onSelectionConfirmed);\r\n      this.viewer.addHandler('selection_cancel', this.onSelectionCanceled);\r\n      this.viewer.addHandler('selection_change', this.onSelectionChange);\r\n      this.viewer.addHandler('selection_toggle', this.onSelectionToggled);\r\n\r\n      this.viewer.addHandler('open', this.draw.bind(this));\r\n      this.viewer.addHandler('animation', this.draw.bind(this));\r\n      this.viewer.addHandler('resize', this.draw.bind(this));\r\n      this.viewer.addHandler('rotate', this.draw.bind(this));\r\n  };\r\n\r\n  $.extend( $.Selection.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\r\n\r\n      toggleState: function() {\r\n          return this.setState(!this.isSelecting);\r\n      },\r\n\r\n      setState: function(enabled) {\r\n          this.isSelecting = enabled;\r\n          this.viewer.setMouseNavEnabled(!enabled);\r\n          // this.viewer.innerTracker.setTracking(!enabled);\r\n          this.outerTracker.setTracking(enabled);\r\n          enabled ? this.draw() : this.undraw();\r\n          if (this.buttonActiveImg) {\r\n              this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\r\n          }\r\n          this.viewer.raiseEvent('selection_toggle', {enabled: enabled});\r\n          return this;\r\n      },\r\n\r\n      setAllowRotation: function(allowRotation) {\r\n          this.allowRotation = allowRotation;\r\n      },\r\n\r\n      enable: function() {\r\n          return this.setState(true);\r\n      },\r\n\r\n      disable: function() {\r\n          return this.setState(false);\r\n      },\r\n\r\n      draw: function() {\r\n            if (this.rect) {\r\n                var deg = this.viewer.viewport.getRotation();\r\n                var rad = Math.PI * deg / 180;\r\n                this.rect.rotation = -rad;\r\n                this.overlay.update(this.rect.normalize());\r\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\r\n            }\r\n            this.viewer.raiseEvent('selection_change', this.rect ? this.rect.normalize() : null);\r\n          return this;\r\n      },\r\n\r\n      undraw: function() {\r\n          this.overlay.destroy();\r\n          this.rect = null;\r\n          return this;\r\n      },\r\n\r\n      confirm: function() {\r\n          if (this.rect) {\r\n              var result = this.rect.normalize();\r\n              if (this.returnPixelCoordinates) {\r\n                var real;\r\n                if (this.viewer.world.getItemCount() > 0) {\r\n                    real = this.viewer.world.getItemAt(0).viewportToImageRectangle(result);\r\n                } else {\r\n                    real = this.viewer.viewport.viewportToImageRectangle(result);\r\n                }\r\n                real = $.SelectionRect.fromRect(real).round();\r\n                  real.rotation = result.rotation;\r\n                  result = real;\r\n              }\r\n              this.viewer.raiseEvent('selection', result);\r\n              this.undraw();\r\n          }\r\n          return this;\r\n      },\r\n\r\n      cancel: function() {\r\n          /*\r\n           * These two lines have been added to fix a issue with mobile where the selection is just a pinpoint after the first drag\r\n           * For some reason disabling then re-enabling the tracking fixes this issue.\r\n           */\r\n          this.outerTracker.setTracking(false);\r\n          this.outerTracker.setTracking(true);\r\n          this.viewer.raiseEvent('selection_cancel', false);\r\n          return this.undraw();\r\n      },\r\n  });\r\n\r\n  function checkMinimumRect(self) {\r\n    if (self.cropMinimumSize === true) {\r\n        const minPoint = self.viewer.viewport.imageToViewportCoordinates(self.cropMinimumWidth, self.cropMinimumHeight);\r\n        self.rect.width = (self.rect.width < minPoint.x) ? minPoint.x : self.rect.width;\r\n        self.rect.height = (self.rect.height < minPoint.y) ? minPoint.y : self.rect.height;\r\n    }\r\n  }\r\n\r\n  function rotate(cx, cy, x, y, degrees) {\r\n        var radians = degrees * (Math.PI / 180),\r\n            cos = Math.cos(radians),\r\n            sin = Math.sin(radians),\r\n            xRot = cos * (x - cx) - sin * (y - cy) + cx,\r\n            yRot = sin * (x - cx) + cos * (y - cy) + cy;\r\n        return [xRot, yRot];\r\n    }\r\n\r\n  function onOutsideDrag(e) {\r\n      // Disable move when makeing new selection\r\n      this.viewer.setMouseNavEnabled(false);\r\n      var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\r\n      var deg = this.viewer.viewport.getRotation();\r\n        var pp = rotate(0, 0, delta.x, delta.y, deg);\r\n        delta.x = pp[0];\r\n        delta.y = pp[1];\r\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\r\n      var start = new $.Point(end.x - delta.x, end.y - delta.y);\r\n      if (!this.rect) {\r\n          if (this.restrictToImage) {\r\n              if (!pointIsInImage(this, start)) {\r\n                  return;\r\n              }\r\n              restrictVector(delta, end);\r\n          }\r\n          if (this.startRotated) {\r\n              this.rotatedStartPoint = start;\r\n              this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\r\n          } else {\r\n              this.rect = new $.SelectionRect(start.x, start.y, delta.x, delta.y);\r\n          }\r\n          this.rectDone = false;\r\n      } else {\r\n          var oldRect;\r\n          if (this.restrictToImage || this.cropMinimumSize) {\r\n              oldRect = this.rect.clone();\r\n          }\r\n          if (this.rectDone) {\r\n              // All rotation as needed.\r\n              if (this.allowRotation) {\r\n                  var angle1 = this.rect.getAngleFromCenter(start);\r\n                  var angle2 = this.rect.getAngleFromCenter(end);\r\n                  this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\r\n              }\r\n          } else {\r\n              if (this.startRotated) {\r\n                  this.rect = getPrerotatedRect(this.rotatedStartPoint, end, this.startRotatedHeight);\r\n              } else {\r\n                  this.rect.width += delta.x;\r\n                  this.rect.height += delta.y;\r\n              }\r\n          }\r\n          var bounds = this.viewer.world.getHomeBounds();\r\n          if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\r\n              this.rect = oldRect;\r\n          }\r\n      }\r\n      checkMinimumRect(this);\r\n      this.draw();\r\n  }\r\n\r\n  function onOutsideDragEnd() {\r\n      // Resizing a selection will function\r\n      // when drawn any direction\r\n      if (this.rect.width < 0){\r\n          this.rect.x += this.rect.width;\r\n          this.rect.width = Math.abs(this.rect.width);\r\n      }\r\n      if (this.rect.height < 0){\r\n          this.rect.y += this.rect.height;\r\n          this.rect.height = Math.abs(this.rect.height);\r\n      }\r\n\r\n      // Eable move after new selection is done\r\n      this.viewer.setMouseNavEnabled(true);\r\n      this.rectDone = true;\r\n  }\r\n\r\n  function onClick() {\r\n      this.viewer.canvas.focus();\r\n  }\r\n\r\n  function onInsideDrag(e) {\r\n      $.addClass(this.element, 'dragging');\r\n      var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\r\n      this.rect.x += delta.x;\r\n      this.rect.y += delta.y;\r\n      var bounds = this.viewer.world.getHomeBounds();\r\n      if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\r\n          this.rect.x -= delta.x;\r\n          this.rect.y -= delta.y;\r\n      }\r\n      checkMinimumRect(this);\r\n      this.draw();\r\n  }\r\n\r\n  function onInsideDragEnd() {\r\n      $.removeClass(this.element, 'dragging');\r\n  }\r\n\r\n  function onBorderDrag(border, e) {\r\n      var delta = e.delta;\r\n      var rotation = this.rect.getDegreeRotation();\r\n      //var center;\r\n      var oldRect = (this.restrictToImage || this.cropMinimumSize) ? this.rect.clone() : null;\r\n      /*if (rotation !== 0) {\r\n          // adjust vector\r\n          delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\r\n          center = this.rect.getCenter();\r\n      }*/\r\n      delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\r\n      var _pp, pp = rotate(0, 0, delta.x, delta.y, -rotation);\r\n        delta.x = pp[0];\r\n        delta.y = pp[1];\r\n        switch (border) {\r\n          case 0:\r\n              //this.rect.y += delta.y;\r\n              _pp = [delta.y * Math.cos(-this.rect.rotation), delta.y * Math.sin(-this.rect.rotation)];\r\n              this.rect.x += _pp[1];\r\n              this.rect.y += _pp[0];\r\n              this.rect.height -= delta.y;\r\n              break;\r\n          case 1:\r\n              this.rect.width += delta.x;\r\n              break;\r\n          case 2:\r\n              this.rect.height += delta.y;\r\n              break;\r\n          case 3:\r\n              //this.rect.x += delta.x;\r\n              _pp = [delta.x * Math.cos(-this.rect.rotation), delta.x * Math.sin(-this.rect.rotation)];\r\n              this.rect.x += _pp[0];\r\n              this.rect.y -= _pp[1];\r\n              this.rect.width -= delta.x;\r\n              break;\r\n          case 0.5:\r\n              //this.rect.y += delta.y;\r\n              _pp = [delta.y * Math.cos(-this.rect.rotation), delta.y * Math.sin(-this.rect.rotation)];\r\n              this.rect.x += _pp[1];\r\n              this.rect.y += _pp[0];\r\n              this.rect.height -= delta.y;\r\n              //this.rect.x += delta.x;\r\n              _pp = [delta.x * Math.cos(-this.rect.rotation), delta.x * Math.sin(-this.rect.rotation)];\r\n              this.rect.x += _pp[0];\r\n              this.rect.y -= _pp[1];\r\n              this.rect.width -= delta.x;\r\n              break;\r\n          case 1.5:\r\n              //this.rect.y += delta.y;\r\n              _pp = [delta.y * Math.cos(-this.rect.rotation), delta.y * Math.sin(-this.rect.rotation)];\r\n              this.rect.x += _pp[1];\r\n              this.rect.y += _pp[0];\r\n              this.rect.height -= delta.y;\r\n              this.rect.width += delta.x;\r\n              break;\r\n          case 2.5:\r\n              this.rect.width += delta.x;\r\n              this.rect.height += delta.y;\r\n              break;\r\n          case 3.5:\r\n              this.rect.height += delta.y;\r\n              //this.rect.x += delta.x;\r\n              _pp = [delta.x * Math.cos(-this.rect.rotation), delta.x * Math.sin(-this.rect.rotation)];\r\n              this.rect.x += _pp[0];\r\n              this.rect.y -= _pp[1];\r\n              this.rect.width -= delta.x;\r\n              break;\r\n      }\r\n      /*if (rotation !== 0) {\r\n          // calc center deviation\r\n          var newCenter = this.rect.getCenter();\r\n          // rotate new center around old\r\n          var target = newCenter.rotate(rotation, center);\r\n          // adjust new center\r\n          delta = target.minus(newCenter);\r\n          this.rect.x += delta.x;\r\n          this.rect.y += delta.y;\r\n      }*/\r\n      var bounds = this.viewer.world.getHomeBounds();\r\n      if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\r\n          this.rect = oldRect;\r\n      }\r\n      checkMinimumRect(this);\r\n      this.draw();\r\n  }\r\n\r\n  // After you have completed dragging, ensure the top left of the selection\r\n  // box is still the top left corner of the box\r\n  function onBorderDragEnd(){\r\n      if (this.rect.width < 0){\r\n          this.rect.x += this.rect.width;\r\n          this.rect.width = Math.abs(this.rect.width);\r\n      }\r\n      if (this.rect.height < 0){\r\n          this.rect.y += this.rect.height;\r\n          this.rect.height = Math.abs(this.rect.height);\r\n      }\r\n  }\r\n\r\n  function onKeyPress(e) {\r\n      var key = e.keyCode ? e.keyCode : e.charCode;\r\n      if (key === 13) {\r\n          this.confirm();\r\n      } else if (String.fromCharCode(key) === this.keyboardShortcut) {\r\n          this.toggleState();\r\n      }\r\n  }\r\n\r\n  function getPrerotatedRect(start, end, height) {\r\n      if (start.x > end.x) {\r\n          // always draw left to right\r\n          var x = start;\r\n          start = end;\r\n          end = x;\r\n      }\r\n      var delta = end.minus(start);\r\n      var dist = start.distanceTo(end);\r\n      var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\r\n      var center = new $.Point(\r\n          delta.x / 2 + start.x,\r\n          delta.y / 2 + start.y\r\n      );\r\n      var rect = new $.SelectionRect(\r\n          center.x - (dist / 2),\r\n          center.y - (height / 2),\r\n          dist,\r\n          height,\r\n          angle\r\n      );\r\n      var heightModDelta = new $.Point(0, height);\r\n      heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\r\n      rect.x += heightModDelta.x / 2;\r\n      rect.y += heightModDelta.y / 2;\r\n      return rect;\r\n  }\r\n\r\n  function pointIsInImage(self, point) {\r\n      var bounds = self.viewer.world.getHomeBounds();\r\n      return point.x >= 0 && point.x <= bounds.width && point.y >= 0 && point.y <= bounds.height;\r\n  }\r\n\r\n  function restrictVector(delta, end) {\r\n      var start;\r\n      for (var prop in {x: 0, y: 0}) {\r\n          start = end[prop] - delta[prop];\r\n          if (start < 1 && start > 0) {\r\n              if (end[prop] > 1) {\r\n                  delta[prop] -= end[prop] - 1;\r\n                  end[prop] = 1;\r\n              } else if (end[prop] < 0) {\r\n                  delta[prop] -= end[prop];\r\n                  end[prop] = 0;\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n})(OpenSeadragon);\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class Overlay\r\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @param {Object} options\r\n     * @param {Element} options.element\r\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\r\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\r\n     * is specified, the overlay will keep a constant size independently of the\r\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\r\n     * be adjusted when the zoom changes.\r\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\r\n     * Relative position to the viewport.\r\n     * Only used if location is a {@link OpenSeadragon.Point}.\r\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\r\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\r\n     * check the size of the overlay everytime it is drawn when using a\r\n     * {@link OpenSeadragon.Point} as options.location. It will improve\r\n     * performances but will cause a misalignment if the overlay size changes.\r\n     */\r\n    $.SelectionOverlay = function( element, location) {\r\n        $.Overlay.apply( this, arguments );\r\n\r\n        // set the rotation in radians\r\n        if ( $.isPlainObject( element ) ) {\r\n            this.rotation = element.location.rotation || 0;\r\n        } else {\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    };\r\n\r\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @param {Element} container\r\n         */\r\n        drawHTML: function() {\r\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\r\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\r\n                ' rotate(' + this.rotation + 'rad)';\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\r\n         * @param {OpenSeadragon.OverlayPlacement} position\r\n         */\r\n        update: function( location ) {\r\n            $.Overlay.prototype.update.apply( this, arguments );\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class SelectionRect\r\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\r\n     * around the center point\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @extends OpenSeadragon.Rect\r\n     * @param {Number} x The vector component 'x'.\r\n     * @param {Number} y The vector component 'y'.\r\n     * @param {Number} width The vector component 'height'.\r\n     * @param {Number} height The vector component 'width'.\r\n     * @param {Number} rotation The rotation in radians\r\n     */\r\n    $.SelectionRect = function( x, y, width, height, rotation ) {\r\n        $.Rect.apply( this, [ x, y, width, height ] );\r\n\r\n        /**\r\n         * The rotation in radians\r\n         * @member {Number} rotation\r\n         * @memberof OpenSeadragon.SelectionRect#\r\n         */\r\n        this.rotation = rotation || 0;\r\n    };\r\n\r\n    $.SelectionRect.fromRect = function(rect) {\r\n        return new $.SelectionRect(\r\n            rect.x,\r\n            rect.y,\r\n            rect.width,\r\n            rect.height\r\n        );\r\n    };\r\n\r\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\r\n         */\r\n        clone: function() {\r\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\r\n        },\r\n\r\n        /**\r\n         * Determines if two Rectangles have equivalent components.\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\r\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\r\n         */\r\n        equals: function( other ) {\r\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\r\n                ( this.rotation === other.rotation );\r\n        },\r\n\r\n        /**\r\n         * Provides a string representation of the rectangle which is useful for\r\n         * debugging.\r\n         * @function\r\n         * @returns {String} A string representation of the rectangle.\r\n         */\r\n        toString: function() {\r\n            return '[' +\r\n                (Math.round(this.x*100) / 100) + ',' +\r\n                (Math.round(this.y*100) / 100) + ',' +\r\n                (Math.round(this.width*100) / 100) + 'x' +\r\n                (Math.round(this.height*100) / 100) + '@' +\r\n                (Math.round(this.rotation*100) / 100) +\r\n            ']';\r\n        },\r\n\r\n        swapWidthHeight: function() {\r\n            var swapped = this.clone();\r\n            swapped.width = this.height;\r\n            swapped.height = this.width;\r\n            swapped.x += (this.width - this.height) / 2;\r\n            swapped.y += (this.height - this.width) / 2;\r\n            return swapped;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @returns {Number} The rotaion in degrees\r\n         */\r\n        getDegreeRotation: function() {\r\n            return this.rotation * (180/Math.PI);\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point} point\r\n         * @returns {Number} The angle in radians\r\n         */\r\n        getAngleFromCenter: function(point) {\r\n            var diff = point.minus(this.getCenter());\r\n            return Math.atan2(diff.x, diff.y);\r\n        },\r\n\r\n        /**\r\n         * Rounds pixel coordinates\r\n         * @function\r\n         * @returns {SelectionRect} The altered rect\r\n         */\r\n        round: function() {\r\n            return new $.SelectionRect(\r\n                Math.round(this.x),\r\n                Math.round(this.y),\r\n                Math.round(this.width),\r\n                Math.round(this.height),\r\n                this.rotation\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Fixes negative width/height, rotation larger than PI. Supports rotated viewer.\r\n         * @function\r\n         * @returns {SelectionRect} The normalized rect\r\n         */\r\n        normalize: function () {\r\n            var fixed = this.clone();\r\n            fixed.rotation %= 2 * Math.PI;\r\n            var pp;\r\n\r\n            if (fixed.width < 0) {\r\n                // old code\r\n                //fixed.x += fixed.width;\r\n                //fixed.width *= -1;\r\n\r\n                // new code\r\n                // pp stores the x portion and the y portion of the width in the unrotated coordinate system.\r\n                pp = [fixed.width * Math.cos(-fixed.rotation), fixed.width * Math.sin(-fixed.rotation)];\r\n\r\n                fixed.x += pp[0];\r\n                fixed.y -= pp[1];\r\n\r\n                fixed.width *= -1;\r\n            }\r\n            if (fixed.height < 0) {\r\n                // old code\r\n                //fixed.y += fixed.height;\r\n                //fixed.height *= -1;\r\n\r\n                // new code\r\n                // pp stores the x portion and the y portion of the height in the unrotated coordinate system.\r\n                pp = [fixed.height * Math.cos(-fixed.rotation), fixed.height * Math.sin(-fixed.rotation)];\r\n\r\n                fixed.x += pp[1];\r\n                fixed.y += pp[0];\r\n\r\n                fixed.height *= -1;\r\n            }\r\n            return fixed;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} area\r\n         * @returns {Boolean} Does this rect fit in a specified area\r\n         */\r\n        fitsIn: function(area) {\r\n            var rect = this.normalize();\r\n            var corners = [\r\n                rect.getTopLeft(),\r\n                rect.getTopRight(),\r\n                rect.getBottomRight(),\r\n                rect.getBottomLeft(),\r\n            ];\r\n            var center = rect.getCenter();\r\n            var rotation = rect.getDegreeRotation();\r\n            var areaEnd = area.getBottomRight();\r\n            for (var i = 0; i < 4; i++) {\r\n                corners[i] = corners[i].rotate(rotation, center);\r\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\r\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\r\n         * @function\r\n         * @returns {SelectionRect} The altered rect\r\n         */\r\n        reduceRotation: function() {\r\n            var reduced;\r\n            if (this.rotation < Math.PI / (-4)) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation += Math.PI / 2;\r\n            } else if (this.rotation > Math.PI / 4) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation -= Math.PI / 2;\r\n            } else {\r\n                reduced = this.clone();\r\n            }\r\n            return reduced;\r\n        },\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n"]}
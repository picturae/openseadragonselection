{
  "version": 3,
  "sources": ["../src/selectionoverlay.js", "../src/selectionrect.js", "../src/selection.js"],
  "sourcesContent": ["(function ($) {\n    'use strict';\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will keep a constant size independently of the\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\n     * be adjusted when the zoom changes.\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\n     * Relative position to the viewport.\n     * Only used if location is a {@link OpenSeadragon.Point}.\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn when using a\n     * {@link OpenSeadragon.Point} as options.location. It will improve\n     * performances but will cause a misalignment if the overlay size changes.\n     */\n    $.SelectionOverlay = function (element, location) {\n        $.Overlay.apply(this, arguments);\n\n        // set the rotation in radians\n        if ($.isPlainObject(element)) {\n            this.rotation = element.location.rotation || 0;\n        } else {\n            this.rotation = location.rotation || 0;\n        }\n    };\n\n    $.SelectionOverlay.prototype = $.extend(Object.create($.Overlay.prototype), {\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function () {\n            $.Overlay.prototype.drawHTML.apply(this, arguments);\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\n                ' rotate(' + this.rotation + 'rad)';\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @param {OpenSeadragon.OverlayPlacement} position\n         */\n        update: function (location) {\n            $.Overlay.prototype.update.apply(this, arguments);\n            this.rotation = location.rotation || 0;\n        }\n    });\n\n}(OpenSeadragon));\n", "(function ($) {\n    'use strict';\n\n    /**\n     * @class SelectionRect\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\n     * around the center point\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.Rect\n     * @param {Number} [x=0] The vector component 'x'.\n     * @param {Number} [y=0] The vector component 'y'.\n     * @param {Number} [width=0] The vector component 'height'.\n     * @param {Number} [height=0] The vector component 'width'.\n     * @param {Number} [rotation=0] The rotation in radians\n     */\n    $.SelectionRect = function (x, y, width, height, rotation) {\n        $.Rect.apply(this, [x, y, width, height]);\n\n        /**\n         * The rotation in radians\n         * @member {Number} rotation\n         * @memberof OpenSeadragon.SelectionRect#\n         */\n        this.rotation = rotation || 0;\n    };\n\n    $.SelectionRect.fromRect = function (rect) {\n        return new $.SelectionRect(\n            rect.x,\n            rect.y,\n            rect.width,\n            rect.height\n        );\n    };\n\n    $.SelectionRect.prototype = $.extend(Object.create($.Rect.prototype), {\n\n        /**\n         * @function\n         * @returns {SelectionRect} a duplicate of this Rect\n         */\n        clone: function () {\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\n        },\n\n        /**\n         * Determines if two Rectangles have equivalent components.\n         * @function\n         * @param {SelectionRect} other The Rectangle to compare to.\n         * @return {boolean} 'true' if all components are equal, otherwise 'false'.\n         */\n        equals: function (other) {\n            return $.Rect.prototype.equals.apply(this, [other]) &&\n                (this.rotation === other.rotation);\n        },\n\n        /**\n         * Provides a string representation of the rectangle which is useful for\n         * debugging.\n         * @function\n         * @returns {string} A string representation of the rectangle.\n         */\n        toString: function () {\n            return '[' +\n                (Math.round(this.x * 100) / 100) + ',' +\n                (Math.round(this.y * 100) / 100) + ',' +\n                (Math.round(this.width * 100) / 100) + 'x' +\n                (Math.round(this.height * 100) / 100) + '@' +\n                (Math.round(this.rotation * 100) / 100) +\n                ']';\n        },\n\n        swapWidthHeight: function () {\n            const swapped = this.clone();\n\n            swapped.width = this.height;\n            swapped.height = this.width;\n\n            swapped.x += (this.width - this.height) / 2;\n            swapped.y += (this.height - this.width) / 2;\n\n            return swapped;\n        },\n\n        /**\n         * @function\n         * @returns {number} The rotation in degrees\n         */\n        getDegreeRotation: function () {\n            return this.rotation * (180 / Math.PI);\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point} point\n         * @returns {number} The angle in radians\n         */\n        getAngleFromCenter: function (point) {\n            const diff = point.minus(this.getCenter());\n            return Math.atan2(diff.x, diff.y);\n        },\n\n        /**\n         * Rounds pixel coordinates\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        round: function () {\n            return new $.SelectionRect(\n                Math.round(this.x),\n                Math.round(this.y),\n                Math.round(this.width),\n                Math.round(this.height),\n                this.rotation\n            );\n        },\n\n        /**\n         * Clones the current rect and fixes negative width/height and rotation larger than PI\n         * @function\n         * @returns {SelectionRect} Cloned normalized rect.\n         */\n        normalize: function () {\n            const fixed = this.clone();\n\n            if (fixed.width < 0) {\n                fixed.x += fixed.width;\n                fixed.width *= -1;\n            }\n\n            if (fixed.height < 0) {\n                fixed.y += fixed.height;\n                fixed.height *= -1;\n            }\n\n            fixed.rotation %= Math.PI;\n\n            return fixed;\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Rect} area\n         * @returns {boolean} Does this rect fit in a specified area\n         */\n        fitsIn: function (area) {\n            const rect = this.normalize();\n\n            const corners = [\n                rect.getTopLeft(),\n                rect.getTopRight(),\n                rect.getBottomRight(),\n                rect.getBottomLeft(),\n            ];\n\n            const center = rect.getCenter();\n            const rotation = rect.getDegreeRotation();\n            const areaEnd = area.getBottomRight();\n\n            for (let i = 0; i < 4; i++) {\n                corners[i] = corners[i].rotate(rotation, center);\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        reduceRotation: function () {\n            let reduced;\n\n            if (this.rotation < Math.PI / (-4)) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation += Math.PI / 2;\n            } else if (this.rotation > Math.PI / 4) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation -= Math.PI / 2;\n            } else {\n                reduced = this.clone();\n            }\n\n            return reduced;\n        },\n    });\n\n}(OpenSeadragon));\n", "import './selectionoverlay.js';\nimport './selectionrect.js';\n\n/**\n * @typedef SelectionPublicOptions\n * @property {HTMLElement=} element HTML element to use for overlay.\n * @property {boolean} [showSelectionControl=true] Show button to toggle selection mode.\n * @property {OpenSeadragon.Button=} toggleButton OpenSeadragon button to use as toggle button.\n * @property {boolean} [showConfirmDenyButtons=true]\n * @property {boolean} [styleConfirmDenyButtons=true]\n * @property {boolean} [returnPixelCoordinates=true]\n * @property {string} [keyboardShortcut='c'] Key to toggle selection mode.\n * @property {SelectionRect=} rect Initial selection as an OpenSeadragon.SelectionRect object.\n * @property {boolean} [allowRotation=true] Turn selection rotation on or off as needed.\n * @property {boolean} [startRotated=false] Alternative method for drawing the selection; useful for rotated crops.\n * @property {number} [startRotatedHeight=0.1] Only used if startRotated=true; value is relative to image height.\n * @property {boolean} [restrictToImage=false] If set to true the selection cannot be outside the image.\n * @property {boolean} [cropMinimumSize=false] Whether to crop the selection to a minimum size.\n * @property {number} [cropMinimumWidth=0] The minimum width to crop to when cropMinimumSize is set to true.\n * @property {number} [cropMinimumHeight=0] The minimum width to crop to when cropMinimumSize is set to true.\n * @property {function(SelectionRect)=} onSelection Callback which is called when a selection has been made.\n * @property {function(false)=} onSelectionCanceled Callback when the selection is cancelled.\n * @property {function(SelectionRect)=} onSelectionChange Callback when the drawn selection changes.\n * @property {function({enabled: boolean})=} onSelectionToggled Callback when selection is enabled/disabled.\n * @property {string=} prefixUrl Overwrites OpenSeadragon's option.\n * @property {string} navImages.selection.REST Sets 'selection' button state image.\n * @property {string} navImages.selection.GROUP Sets 'selection' button state image.\n * @property {string} navImages.selection.HOVER Sets 'selection' button state image.\n * @property {string} navImages.selection.DOWN Sets 'selection' button state image.\n * @property {string} navImages.selectionConfirm.REST Sets 'selectionConfirm' button state image.\n * @property {string} navImages.selectionConfirm.GROUP Sets 'selectionConfirm' button state image.\n * @property {string} navImages.selectionConfirm.HOVER Sets 'selectionConfirm' button state image.\n * @property {string} navImages.selectionConfirm.DOWN Sets 'selectionConfirm' button state image.\n * @property {string} navImages.selectionCancel.REST Sets 'selectionCancel' button state image.\n * @property {string} navImages.selectionCancel.GROUP Sets 'selectionCancel' button state image.\n * @property {string} navImages.selectionCancel.HOVER Sets 'selectionCancel' button state image.\n * @property {string} navImages.selectionCancel.DOWN Sets 'selectionCancel' button state image.\n * @property {string} [borderStyle.width='1px'] Overrides the default selection border width.\n * @property {string} [borderStyle.color='#fff'] Overrides the default selection border color.\n * @property {string} [handleStyle.top='50%']\n * @property {string} [handleStyle.left='50%']\n * @property {string} [handleStyle.width='6px']\n * @property {string} [handleStyle.height='6px']\n * @property {string} [handleStyle.margin='-4px 0 0 -4px']\n * @property {string} [handleStyle.background='#000']\n * @property {string} [handleStyle.border='1px solid #ccc']\n * @property {string} [cornersStyle.width='6px']\n * @property {string} [cornersStyle.height='6px']\n * @property {string} [cornersStyle.background='#000']\n * @property {string} [cornersStyle.border='1px solid #ccc']\n */\n\n/**\n * @typedef SelectionInternalOptions\n * @extends SelectionPublicOptions\n * @property {OpenSeadragon.Viewer} viewer\n * @property {boolean} isSelecting\n * @property {Node | false} buttonActiveImg\n * @property {boolean} rectDone\n */\n\n/**\n * @typedef {SelectionPublicOptions & SelectionInternalOptions} SelectionOptions\n */\n\n/**\n * @class SelectionPlugin\n * @extends SelectionOptions\n * @property {function(): SelectionPlugin} toggleState\n * @property {function(boolean): SelectionPlugin} setState\n * @property {function(boolean): SelectionPlugin} setAllowRotation\n * @property {function(): SelectionPlugin} enable\n * @property {function(): SelectionPlugin} disable\n * @property {function(): SelectionPlugin} draw\n * @property {function(): SelectionPlugin} undraw\n * @property {function(): SelectionPlugin} confirm\n * @property {function(): SelectionPlugin} cancel\n */\n\n(/**\n * @param {OpenSeadragon} $ OpenSeadragon base object.\n */\nfunction ($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 5) {\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.selection = function (options) {\n        if (!this.selectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.selectionInstance = new $.Selection(options);\n        }\n        return this.selectionInstance;\n    };\n\n    /**\n     * @param {SelectionOptions} options\n     * @memberOf OpenSeadragon\n     * @constructor SelectionPlugin\n     * @this {SelectionPlugin & SelectionOptions}\n     */\n    $.Selection = function (options) {\n        $.extend(true, this, {\n            // internal state properties\n            viewer: null,\n            isSelecting: false,\n            buttonActiveImg: false,\n            rectDone: true,\n\n            // options\n            element: null,\n            toggleButton: null,\n            showSelectionControl: true,\n            showConfirmDenyButtons: true,\n            styleConfirmDenyButtons: true,\n            returnPixelCoordinates: true,\n            keyboardShortcut: 'c',\n            rect: null,\n            allowRotation: true,\n            startRotated: false, // useful for rotated crops\n            startRotatedHeight: 0.1,\n            restrictToImage: false,\n            cropMinimumSize: false,\n            cropMinimumWidth: 0,\n            cropMinimumHeight: 0,\n            onSelection: null,\n            onSelectionCanceled: null,\n            onSelectionChange: null,\n            onSelectionToggled: null,\n            prefixUrl: null,\n            navImages: {\n                selection: {\n                    REST: 'selection_rest.png',\n                    GROUP: 'selection_grouphover.png',\n                    HOVER: 'selection_hover.png',\n                    DOWN: 'selection_pressed.png'\n                },\n                selectionConfirm: {\n                    REST: 'selection_confirm_rest.png',\n                    GROUP: 'selection_confirm_grouphover.png',\n                    HOVER: 'selection_confirm_hover.png',\n                    DOWN: 'selection_confirm_pressed.png'\n                },\n                selectionCancel: {\n                    REST: 'selection_cancel_rest.png',\n                    GROUP: 'selection_cancel_grouphover.png',\n                    HOVER: 'selection_cancel_hover.png',\n                    DOWN: 'selection_cancel_pressed.png'\n                },\n            },\n            borderStyle: {\n                width: '1px',\n                color: '#fff'\n            },\n            handleStyle: {\n                top: '50%',\n                left: '50%',\n                width: '6px',\n                height: '6px',\n                margin: '-4px 0 0 -4px',\n                background: '#000',\n                border: '1px solid #ccc'\n            },\n            cornersStyle: {\n                width: '6px',\n                height: '6px',\n                background: '#000',\n                border: '1px solid #ccc'\n            },\n        }, options);\n\n        $.extend(true, this.navImages, this.viewer.navImages);\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.style.background = 'rgba(0, 0, 0, 0.1)';\n            this.element.className = 'selection-box';\n        }\n\n        this.borders = this.borders || [];\n\n        let handle;\n        const corners = [];\n\n        for (let i = 0; i < 4; i++) {\n            if (!this.borders[i]) {\n                this.borders[i] = $.makeNeutralElement('div');\n                this.borders[i].className = 'border-' + i;\n                this.borders[i].style.position = 'absolute';\n                this.borders[i].style.width = this.borderStyle.width;\n                this.borders[i].style.height = this.borderStyle.width;\n                this.borders[i].style.background = this.borderStyle.color;\n            }\n\n            handle = $.makeNeutralElement('div');\n            handle.className = 'border-' + i + '-handle';\n            handle.style.position = 'absolute';\n            handle.style.top = this.handleStyle.top;\n            handle.style.left = this.handleStyle.left;\n            handle.style.width = this.handleStyle.width;\n            handle.style.height = this.handleStyle.height;\n            handle.style.margin = this.handleStyle.margin;\n            handle.style.background = this.handleStyle.background;\n            handle.style.border = this.handleStyle.border;\n\n            new $.MouseTracker({\n                element: this.borders[i],\n                dragHandler: onBorderDrag.bind(this, i),\n                dragEndHandler: onBorderDragEnd.bind(this, i),\n            });\n\n            corners[i] = $.makeNeutralElement('div');\n            corners[i].className = 'corner-' + i + '-handle';\n            corners[i].style.position = 'absolute';\n            corners[i].style.width = this.cornersStyle.width;\n            corners[i].style.height = this.cornersStyle.height;\n            corners[i].style.background = this.cornersStyle.background;\n            corners[i].style.border = this.cornersStyle.border;\n            new $.MouseTracker({\n                element: corners[i],\n                dragHandler: onBorderDrag.bind(this, i + 0.5),\n                dragEndHandler: onBorderDragEnd.bind(this, i),\n            });\n\n            this.borders[i].appendChild(handle);\n            this.element.appendChild(this.borders[i]);\n\n            // defer corners, so they are appended last\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\n        }\n\n        this.borders[0].style.top = 0;\n        this.borders[0].style.width = '100%';\n        this.borders[1].style.right = 0;\n        this.borders[1].style.height = '100%';\n        this.borders[2].style.bottom = 0;\n        this.borders[2].style.width = '100%';\n        this.borders[3].style.left = 0;\n        this.borders[3].style.height = '100%';\n\n        corners[0].style.top = '-3px';\n        corners[0].style.left = '-3px';\n        corners[1].style.top = '-3px';\n        corners[1].style.right = '-3px';\n        corners[2].style.bottom = '-3px';\n        corners[2].style.right = '-3px';\n        corners[3].style.bottom = '-3px';\n        corners[3].style.left = '-3px';\n\n        if (!this.overlay) {\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\n        }\n\n        this.innerTracker = new $.MouseTracker({\n            element: this.element,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler: $.delegate(this, onInsideDrag),\n            dragEndHandler: $.delegate(this, onInsideDragEnd),\n            clickHandler: $.delegate(this, onClick),\n        });\n\n\n        this.viewer.addHandler('canvas-click', onClick.bind(this));\n        this.viewer.addHandler('canvas-drag', onOutsideDrag.bind(this));\n        this.viewer.addHandler('canvas-drag-end', onOutsideDragEnd.bind(this));\n\n        if (this.keyboardShortcut) {\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate(this, onKeyPress),\n                false\n            );\n        }\n\n        const prefix = this.prefixUrl || this.viewer.prefixUrl || '';\n        const useGroup = this.viewer.buttons && this.viewer.buttonGroup.buttons;\n        const anyButton = useGroup ? this.viewer.buttonGroup.buttons[0] : null;\n        const onFocusHandler = anyButton ? anyButton.onFocus : null;\n        const onBlurHandler = anyButton ? anyButton.onBlur : null;\n\n        if (this.showSelectionControl) {\n            this.toggleButton = new $.Button({\n                element: this.toggleButton ? $.getElement(this.toggleButton) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip: $.getString('Tooltips.SelectionToggle') || 'Toggle selection',\n                srcRest: prefix + this.navImages.selection.REST,\n                srcGroup: prefix + this.navImages.selection.GROUP,\n                srcHover: prefix + this.navImages.selection.HOVER,\n                srcDown: prefix + this.navImages.selection.DOWN,\n                onRelease: this.toggleState.bind(this),\n                onFocus: onFocusHandler,\n                onBlur: onBlurHandler\n            });\n\n            if (useGroup) {\n                this.viewer.buttonGroup.buttons.push(this.toggleButton);\n                this.viewer.buttonGroup.element.appendChild(this.toggleButton.element);\n            }\n\n            if (this.toggleButton.imgDown) {\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\n            }\n        }\n\n        if (this.showConfirmDenyButtons) {\n            this.confirmButton = new $.Button({\n                element: this.confirmButton ? $.getElement(this.confirmButton) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip: $.getString('Tooltips.SelectionConfirm') || 'Confirm selection',\n                srcRest: prefix + this.navImages.selectionConfirm.REST,\n                srcGroup: prefix + this.navImages.selectionConfirm.GROUP,\n                srcHover: prefix + this.navImages.selectionConfirm.HOVER,\n                srcDown: prefix + this.navImages.selectionConfirm.DOWN,\n                onRelease: this.confirm.bind(this),\n                onFocus: onFocusHandler,\n                onBlur: onBlurHandler\n            });\n\n            const confirm = this.confirmButton.element;\n            confirm.classList.add('confirm-button');\n            this.element.appendChild(confirm);\n\n            this.cancelButton = new $.Button({\n                element: this.cancelButton ? $.getElement(this.cancelButton) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip: $.getString('Tooltips.SelectionCancel') || 'Cancel selection',\n                srcRest: prefix + this.navImages.selectionCancel.REST,\n                srcGroup: prefix + this.navImages.selectionCancel.GROUP,\n                srcHover: prefix + this.navImages.selectionCancel.HOVER,\n                srcDown: prefix + this.navImages.selectionCancel.DOWN,\n                onRelease: this.cancel.bind(this),\n                onFocus: onFocusHandler,\n                onBlur: onBlurHandler\n            });\n\n            const cancel = this.cancelButton.element;\n            cancel.classList.add('cancel-button');\n            this.element.appendChild(cancel);\n\n            if (this.styleConfirmDenyButtons) {\n                confirm.style.position = 'absolute';\n                confirm.style.top = '50%';\n                confirm.style.left = '50%';\n                confirm.style.transform = 'translate(-100%, -50%)';\n\n                cancel.style.position = 'absolute';\n                cancel.style.top = '50%';\n                cancel.style.left = '50%';\n                cancel.style.transform = 'translate(0, -50%)';\n            }\n        }\n\n        this.viewer.addHandler('selection', this.onSelection);\n        this.viewer.addHandler('selection_cancel', this.onSelectionCanceled);\n        this.viewer.addHandler('selection_change', this.onSelectionChange);\n        this.viewer.addHandler('selection_toggle', this.onSelectionToggled);\n\n        this.viewer.addHandler('open', this.draw.bind(this));\n        this.viewer.addHandler('animation', this.draw.bind(this));\n        this.viewer.addHandler('resize', this.draw.bind(this));\n        this.viewer.addHandler('rotate', this.draw.bind(this));\n    };\n\n    $.extend($.Selection.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\n        toggleState: function () {\n            return this.setState(!this.isSelecting);\n        },\n\n        setState: function (enabled) {\n            this.isSelecting = enabled;\n\n            if (enabled) {\n                this.draw();\n            } else {\n                this.undraw();\n            }\n\n            if (this.buttonActiveImg) {\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\n            }\n\n            this.viewer.raiseEvent('selection_toggle', { enabled: enabled });\n\n            return this;\n        },\n\n        setAllowRotation: function (allowRotation) {\n            this.allowRotation = allowRotation;\n        },\n\n        enable: function () {\n            return this.setState(true);\n        },\n\n        disable: function () {\n            return this.setState(false);\n        },\n\n        draw: function () {\n            if (this.rect) {\n                this.overlay.update(this.rect.normalize());\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\n\n                this.viewer.raiseEvent('selection_change', this.getCurrentRect());\n            }\n\n            return this;\n        },\n\n        undraw: function () {\n            this.overlay.destroy();\n            this.rect = null;\n            return this;\n        },\n\n        confirm: function () {\n            if (this.rect) {\n                this.viewer.raiseEvent('selection', this.getCurrentRect());\n                this.undraw();\n            }\n\n            return this;\n        },\n\n        getCurrentRect: function () {\n            let result = this.rect.normalize();\n\n            if (this.returnPixelCoordinates) {\n                let real = this.viewer.viewport.viewportToImageRectangle(result);\n                real = $.SelectionRect.fromRect(real).round();\n                real.rotation = result.rotation;\n                result = real;\n            }\n\n            return result;\n        },\n\n        cancel: function () {\n            this.viewer.raiseEvent('selection_cancel', false);\n            return this.undraw();\n        },\n    });\n\n    /**\n     * @param {SelectionPlugin} self\n     */\n    function checkMinimumRect(self) {\n        if (self.cropMinimumSize === true) {\n            const minPoint = self.viewer.viewport.imageToViewportCoordinates(self.cropMinimumWidth, self.cropMinimumHeight);\n            self.rect.width = (self.rect.width < minPoint.x) ? minPoint.x : self.rect.width;\n            self.rect.height = (self.rect.height < minPoint.y) ? minPoint.y : self.rect.height;\n        }\n    }\n\n    function onOutsideDrag(e) {\n        // Prevent the image itself from moving when a selection is being made. If a selection has been made and\n        // allowRotation is set to false it will allow moving the image instead of rotating the selection.\n        e.preventDefaultAction = this.isSelecting && (this.rect === null || !this.rectDone || this.allowRotation);\n\n        if (!this.isSelecting) {\n            return;\n        }\n\n        const delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        const end = this.viewer.viewport.pointFromPixel(e.position, true);\n        const start = new $.Point(end.x - delta.x, end.y - delta.y);\n\n        if (!this.rect) {\n            if (this.restrictToImage) {\n                if (!pointIsInImage(this, start)) {\n                    return;\n                }\n\n                restrictVector(delta, end);\n            }\n\n            if (this.startRotated) {\n                this.rotatedStartPoint = start;\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\n            } else {\n                this.rect = new $.SelectionRect(start.x, start.y, delta.x, delta.y);\n            }\n\n            this.rectDone = false;\n        } else {\n            let oldRect;\n\n            if (this.restrictToImage || this.cropMinimumSize) {\n                oldRect = this.rect.clone();\n            }\n\n            if (this.rectDone) {\n                // All rotation as needed.\n                if (this.allowRotation) {\n                    const angle1 = this.rect.getAngleFromCenter(start);\n                    const angle2 = this.rect.getAngleFromCenter(end);\n                    this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\n                }\n            } else {\n                if (this.startRotated) {\n                    this.rect = getPrerotatedRect(this.rotatedStartPoint, end, this.startRotatedHeight);\n                } else {\n                    this.rect.width += delta.x;\n                    this.rect.height += delta.y;\n                }\n            }\n\n            const bounds = this.viewer.world.getHomeBounds();\n            if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n                this.rect = oldRect;\n            }\n        }\n\n        checkMinimumRect(this);\n        this.draw();\n    }\n\n    function onOutsideDragEnd() {\n        if (this.rect === null) {\n            return;\n        }\n\n        // Resizing a selection will function\n        // when drawn any direction\n        if (this.rect.width < 0) {\n            this.rect.x += this.rect.width;\n            this.rect.width = Math.abs(this.rect.width);\n        }\n\n        if (this.rect.height < 0) {\n            this.rect.y += this.rect.height;\n            this.rect.height = Math.abs(this.rect.height);\n        }\n\n        // Enable move after new selection is done\n        this.viewer.setMouseNavEnabled(true);\n        this.rectDone = true;\n    }\n\n    function onClick() {\n        this.viewer.canvas.focus();\n    }\n\n    function onInsideDrag(e) {\n        $.addClass(this.element, 'dragging');\n        const delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        this.rect.x += delta.x;\n        this.rect.y += delta.y;\n        const bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect.x -= delta.x;\n            this.rect.y -= delta.y;\n        }\n        checkMinimumRect(this);\n        this.draw();\n    }\n\n    function onInsideDragEnd() {\n        $.removeClass(this.element, 'dragging');\n    }\n\n    function onBorderDrag(border, e) {\n        const rotation = this.rect.getDegreeRotation();\n        const oldRect = (this.restrictToImage || this.cropMinimumSize) ? this.rect.clone() : null;\n\n        let delta = e.delta;\n        let center;\n\n        if (rotation !== 0) {\n            // adjust vector\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\n            center = this.rect.getCenter();\n        }\n\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\n\n        switch (border) {\n            case 0:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                break;\n            case 1:\n                this.rect.width += delta.x;\n                break;\n            case 2:\n                this.rect.height += delta.y;\n                break;\n            case 3:\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 0.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 1.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.width += delta.x;\n                break;\n            case 2.5:\n                this.rect.width += delta.x;\n                this.rect.height += delta.y;\n                break;\n            case 3.5:\n                this.rect.height += delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n        }\n        if (rotation !== 0) {\n            // calc center deviation\n            const newCenter = this.rect.getCenter();\n            // rotate new center around old\n            const target = newCenter.rotate(rotation, center);\n            // adjust new center\n            delta = target.minus(newCenter);\n            this.rect.x += delta.x;\n            this.rect.y += delta.y;\n        }\n        const bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect = oldRect;\n        }\n        checkMinimumRect(this);\n        this.draw();\n    }\n\n    // After you have completed dragging, ensure the top left of the selection\n    // box is still the top left corner of the box\n    function onBorderDragEnd() {\n        if (this.rect.width < 0) {\n            this.rect.x += this.rect.width;\n            this.rect.width = Math.abs(this.rect.width);\n        }\n        if (this.rect.height < 0) {\n            this.rect.y += this.rect.height;\n            this.rect.height = Math.abs(this.rect.height);\n        }\n    }\n\n    function onKeyPress(e) {\n        const key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13) {\n            this.confirm();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n    }\n\n    function getPrerotatedRect(start, end, height) {\n        if (start.x > end.x) {\n            // always draw left to right\n            const x = start;\n            start = end;\n            end = x;\n        }\n        const delta = end.minus(start);\n        const dist = start.distanceTo(end);\n        const angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\n        const center = new $.Point(\n            delta.x / 2 + start.x,\n            delta.y / 2 + start.y\n        );\n        const rect = new $.SelectionRect(\n            center.x - (dist / 2),\n            center.y - (height / 2),\n            dist,\n            height,\n            angle\n        );\n        let heightModDelta = new $.Point(0, height);\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\n\n        rect.x += heightModDelta.x / 2;\n        rect.y += heightModDelta.y / 2;\n\n        return rect;\n    }\n\n    function pointIsInImage(self, point) {\n        const bounds = self.viewer.world.getHomeBounds();\n        return point.x >= 0 && point.x <= bounds.width && point.y >= 0 && point.y <= bounds.height;\n    }\n\n    function restrictVector(delta, end) {\n        let start;\n        for (const prop in { x: 0, y: 0 }) {\n            start = end[prop] - delta[prop];\n            if (start < 1 && start > 0) {\n                if (end[prop] > 1) {\n                    delta[prop] -= end[prop] - 1;\n                    end[prop] = 1;\n                } else if (end[prop] < 0) {\n                    delta[prop] -= end[prop];\n                    end[prop] = 0;\n                }\n            }\n        }\n    }\n\n})(OpenSeadragon);\n"],
  "mappings": "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",
  "names": ["$", "element", "location", "$", "x", "y", "width", "height", "rotation", "rect", "other", "swapped", "point", "diff", "fixed", "area", "corners", "center", "areaEnd", "i", "reduced", "$", "options", "handle", "corners", "i", "onBorderDrag", "onBorderDragEnd", "onInsideDrag", "onInsideDragEnd", "onClick", "onOutsideDrag", "onOutsideDragEnd", "onKeyPress", "prefix", "useGroup", "anyButton", "onFocusHandler", "onBlurHandler", "confirm", "cancel", "enabled", "allowRotation", "result", "real", "checkMinimumRect", "self", "minPoint", "e", "delta", "end", "start", "oldRect", "angle1", "angle2", "getPrerotatedRect", "bounds", "pointIsInImage", "restrictVector", "border", "rotation", "center", "newCenter", "key", "height", "x", "dist", "angle", "rect", "heightModDelta", "point", "prop"]
}
